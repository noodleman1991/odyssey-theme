# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  hasReferences: Boolean
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type Folder {
  name: String!
  path: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  page(relativePath: String): Page!
  pageConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PageFilter): PageConnection!
  blog(relativePath: String): Blog!
  blogConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: BlogFilter): BlogConnection!
  activities(relativePath: String): Activities!
  activitiesConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: ActivitiesFilter): ActivitiesConnection!
}

input DocumentFilter {
  page: PageFilter
  blog: BlogFilter
  activities: ActivitiesFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter, folder: String): DocumentConnection!
}

union DocumentNode = Page | Blog | Activities | Folder

type PageBlocksHeroCta {
  text: String
  href: String
}

type PageBlocksHero {
  heading: String
  subheading: String
  text: JSON
  image: String
  cta: PageBlocksHeroCta
  layout: String
}

type PageBlocksTextBlock {
  heading: String
  content: JSON
  alignment: String
  narrow: Boolean
}

type PageBlocksTextImage {
  heading: String
  subheading: String
  text: JSON
  image: String
  imageAlt: String
  layout: String
  sticky: Boolean
}

union PageBlocks = PageBlocksHero | PageBlocksTextBlock | PageBlocksTextImage

type Page implements Node & Document {
  title: String!
  description: String
  lang: String!
  blocks: [PageBlocks]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input RichTextFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input PageBlocksHeroCtaFilter {
  text: StringFilter
  href: StringFilter
}

input PageBlocksHeroFilter {
  heading: StringFilter
  subheading: StringFilter
  text: RichTextFilter
  image: ImageFilter
  cta: PageBlocksHeroCtaFilter
  layout: StringFilter
}

input BooleanFilter {
  eq: Boolean
  exists: Boolean
}

input PageBlocksTextBlockFilter {
  heading: StringFilter
  content: RichTextFilter
  alignment: StringFilter
  narrow: BooleanFilter
}

input PageBlocksTextImageFilter {
  heading: StringFilter
  subheading: StringFilter
  text: RichTextFilter
  image: ImageFilter
  imageAlt: StringFilter
  layout: StringFilter
  sticky: BooleanFilter
}

input PageBlocksFilter {
  hero: PageBlocksHeroFilter
  textBlock: PageBlocksTextBlockFilter
  textImage: PageBlocksTextImageFilter
}

input PageFilter {
  title: StringFilter
  description: StringFilter
  lang: StringFilter
  blocks: PageBlocksFilter
}

type PageConnectionEdges {
  cursor: String!
  node: Page
}

type PageConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PageConnectionEdges]
}

type Blog implements Node & Document {
  title: String!
  description: String
  publishDate: String!
  featuredImage: String
  excerpt: String
  tags: [String]
  authors: [String]
  lang: String!
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input DatetimeFilter {
  after: String
  before: String
  eq: String
  exists: Boolean
  in: [String]
}

input BlogFilter {
  title: StringFilter
  description: StringFilter
  publishDate: DatetimeFilter
  featuredImage: ImageFilter
  excerpt: StringFilter
  tags: StringFilter
  authors: StringFilter
  lang: StringFilter
  body: RichTextFilter
}

type BlogConnectionEdges {
  cursor: String!
  node: Blog
}

type BlogConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [BlogConnectionEdges]
}

type Activities implements Node & Document {
  title: String!
  type: String
  date: String!
  location: String
  description: String
  image: String
  upcoming: Boolean
  lang: String!
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input ActivitiesFilter {
  title: StringFilter
  type: StringFilter
  date: DatetimeFilter
  location: StringFilter
  description: StringFilter
  image: ImageFilter
  upcoming: BooleanFilter
  lang: StringFilter
  body: RichTextFilter
}

type ActivitiesConnectionEdges {
  cursor: String!
  node: Activities
}

type ActivitiesConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [ActivitiesConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  createFolder(collection: String, relativePath: String!): DocumentNode!
  updatePage(relativePath: String!, params: PageMutation!): Page!
  createPage(relativePath: String!, params: PageMutation!): Page!
  updateBlog(relativePath: String!, params: BlogMutation!): Blog!
  createBlog(relativePath: String!, params: BlogMutation!): Blog!
  updateActivities(relativePath: String!, params: ActivitiesMutation!): Activities!
  createActivities(relativePath: String!, params: ActivitiesMutation!): Activities!
}

input DocumentUpdateMutation {
  page: PageMutation
  blog: BlogMutation
  activities: ActivitiesMutation
  relativePath: String
}

input DocumentMutation {
  page: PageMutation
  blog: BlogMutation
  activities: ActivitiesMutation
}

input PageBlocksHeroCtaMutation {
  text: String
  href: String
}

input PageBlocksHeroMutation {
  heading: String
  subheading: String
  text: JSON
  image: String
  cta: PageBlocksHeroCtaMutation
  layout: String
}

input PageBlocksTextBlockMutation {
  heading: String
  content: JSON
  alignment: String
  narrow: Boolean
}

input PageBlocksTextImageMutation {
  heading: String
  subheading: String
  text: JSON
  image: String
  imageAlt: String
  layout: String
  sticky: Boolean
}

input PageBlocksMutation {
  hero: PageBlocksHeroMutation
  textBlock: PageBlocksTextBlockMutation
  textImage: PageBlocksTextImageMutation
}

input PageMutation {
  title: String
  description: String
  lang: String
  blocks: [PageBlocksMutation]
}

input BlogMutation {
  title: String
  description: String
  publishDate: String
  featuredImage: String
  excerpt: String
  tags: [String]
  authors: [String]
  lang: String
  body: JSON
}

input ActivitiesMutation {
  title: String
  type: String
  date: String
  location: String
  description: String
  image: String
  upcoming: Boolean
  lang: String
  body: JSON
}

schema {
  query: Query
  mutation: Mutation
}
